#!/bin/env bash

# --------------------------------------------------------
colors=(

    WHITE='\033[97m'
    BLACK='\033[30m'
    GRAY='\033[90m'
    YELLOW='\033[93m'
    GREEN='\033[92m'
    CYAN='\033[96m'
    BLUE='\033[94m'
    PURPLE='\033[95m'
    RED='\033[91m'
    ORANGE='\033[38;5;208m'

    BG_WHITE='\033[107m'
    BG_BLACK='\033[40m'
    BG_GRAY='\033[100m'
    BG_YELLOW='\033[103m'
    BG_GREEN='\033[42m'
    BG_CYAN='\033[46m'
    BG_BLUE='\033[44m'
    BG_PURPLE='\033[45m'
    BG_RED='\033[41m'
    BG_ORANGE='\033[48;5;208m'

    # WHITE='\033[1;37m'
    # BLACK='\033[0;30m'
    # GRAY='\033[0;37m'
    # RED='\033[0;31m'
    # GREEN='\033[0;32m'
    # BLUE='\033[0;34m'
    # YELLOW='\033[0;33m'
    # PURPLE='\033[0;35m'
    # CYAN='\033[0;36m'

    # BG_WHITE='\033[1;47m'
    # BG_BLACK='\033[0;40m'
    # BG_GRAY='\033[0;47m'
    # BG_RED='\033[0;41m'
    # BG_GREEN='\033[0;42m'
    # BG_BLUE='\033[0;44m'
    # BG_YELLOW='\033[0;43m'
    # BG_PURPLE='\033[0;45m'
    # BG_CYAN='\033[0;46m'

    BOLD='\033[1m'
    ITALIC='\033[3m'
    UNDERLINE='\033[4m'

    RESET='\033[0m'

    TAB='  '
)

for color in "${colors[@]}"; do
    export "${color?}"
done

# --------------------------------------------------------

title() {
    echo -e "$BOLD$1$RESET"
}

title2() {
    echo -e "$YELLOW$1$RESET"
}

subtitle() {
    echo -e "$WHITE$1$RESET"
}

# --------------------------------------------------------

show() {
    echo -e "$1"
}

show_param() {
    param="$1"
    shift
    echo -e "${BOLD}$param${RESET}" "$@"
}

show_param_title() {
    param="$1"
    shift
    echo -e " ${YELLOW}$param${RESET}"
    if [ -n "$*" ]; then
        echo -e "${TAB}${TAB}$*"
    fi
}

show_aligned_help_message() {
    message="$1"
    align="$2"
    help="$3"
    fill_char="$4"
    shift 4
    flags="$*"

    fill_cahr_quantity=$((align - ${#message}))
    fill_chars="$(printf "%0.s${fill_char}" $(seq 1 ${fill_cahr_quantity}))"

    echo -e "${TAB}${TAB}${GREEN}$message${RESET}${GRAY}${ITALIC}$fill_chars${RESET}${WHITE}$help"
    if [ -n "$flags" ]; then
        last_line="$(printf "%-${align}s" "$flags")"
        echo -e "$last_line"
    fi
}

# --------------------------------------------------------

print_align_with_fill_char() {
    message="$1"
    min_width="$2"
    fill_char="$3"
    printf "%-${min_width}s" "$message" | sed "s/ /$fill_char/g"
}
# --------------------------------------------------------

nl() {
    echo
}

# --------------------------------------------------------

alert() {
    color_to_use="$1"
    shift
    bg_to_use="${1:-RESET}"
    shift
    prefix="$1"
    shift
    alert_text="$1"
    shift
    message="$1"
    shift
    prefix_to_show="$([ -n "$prefix" ] && echo -e "[$prefix]")"
    echo
    echo -e "  ${bg_to_use} ${prefix_to_show}${alert_text} ${RESET} ${color_to_use}${message}${RESET}"
    if [ -n "$*" ]; then
        echo -e "  ${GRAY}|${RESET}${TAB}$*"
    fi
    echo "  ${GRAY}--${RESET}"
}

error() {
    alert "$RED" "$BG_RED" "" "ERROR" "$@"
}

warning() {
    alert "$ORANGE" "$BG_ORANGE" "" "WARNING" "$@"
}

debug() {
    if [ -n "$DEBUG" ] && [ "$DEBUG" -eq 1 ]; then
        echo -e "${WHITE}${CYAN}[$(date +%H:%M:%S)]${CYAN}${ITALIC}Log: ${RESET}${GRAY}$*${RESET}"
    fi
}
